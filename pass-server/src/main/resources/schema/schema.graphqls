type Query {
    getUser: User
    getPasses: [Pass]
    getClassrooms: [Classroom]
}

type Mutation {
    registerUser(registerUserInput: RegisterUserInput!): User
    createClassroom(createClassroomInput: CreateClassroomInput!): Classroom
    joinClassroom(joinClassroomInput: JoinClassroomInput!): JoinClassroomOutput
    requestPass(requestPassInput: CreatePassInput!): RequestPassOutput
    createPass(createPassInput: CreatePassInput!): Pass
    revokePass(passId: ID!): Pass
}

input RegisterUserInput {
    firstName: String
    lastName: String
    email: String
    password: String
    phone: String
    profileImage: String
    role: UserRole
}


type RequestPassOutput {
    teacherId: ID!
    status: String
}

input CreatePassInput {
    studentId: ID!
    classroomId: ID!
    passType: PassType
    startTime: String
    endTime: String
}

enum UserRole {
    STUDENT
    TEACHER
}

enum PassType {
    BATHROOM
    LIBRARY
    OFFICE
    CLINIC
    LOCKER
    GYM
    OTHER
}

input CreateClassroomInput {
    name: String!
    description: String
}

type Pass {
    id: ID!
    student: User
    classroom: Classroom
    teacher: User
    passType: String
    revoked: Boolean
    startTime: String
    endTime: String
    createdAt: String
    updatedAt: String
}

# for getUser
type User {
    id: ID!
    role: UserRole
    firstName: String
    lastName: String
    email: String
    phone: String
    profileImage: String
    createdAt: String
    updatedAt: String
}

type Classroom {
    id: ID!
    name: String
    description: String
    code: String
    teacher: User
    createdAt: String
    updatedAt: String
}

input JoinClassroomInput {
    classCode: String
}

type JoinClassroomOutput {
    studentId: ID
    status: String
}